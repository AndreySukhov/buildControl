import React from 'react';
import { 
  Card, 
  Row, 
  Col, 
  Typography, 
  Progress, 
  Avatar, 
  List, 
  Button, 
  Space,
  Timeline,
  Badge,
  Tooltip
} from 'antd';
import { 
  ArrowLeftOutlined, 
  UserOutlined, 
  CalendarOutlined, 
  CheckCircleOutlined,
  SyncOutlined,
  ExclamationCircleOutlined,
  EnvironmentOutlined
} from '@ant-design/icons';
import { useParams, useNavigate } from 'react-router-dom';
import { ObjectMap } from '../components/ObjectMap';
import { OBJECTS_MOCK } from '../mocks/objects';

const { Title, Text, Paragraph } = Typography;

interface ObjectWorker {
  id: number;
  name: string;
  role: string;
  avatar?: string;
  status: 'online' | 'offline' | 'away';
}

interface ObjectTask {
  id: number;
  title: string;
  status: 'completed' | 'in-progress' | 'pending';
  assignee: string;
  dueDate: string;
}

interface ObjectMilestone {
  date: string;
  title: string;
  status: 'completed' | 'current' | 'upcoming';
  description: string;
}

export const ObjectDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();

  // –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
  const object = OBJECTS_MOCK.find((obj) => obj.id === Number(id)) || OBJECTS_MOCK[0];

  // üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
  const progress = Math.floor(Math.random() * 100);

  const workers: ObjectWorker[] = [
    { id: 1, name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤', role: '–ì–ª–∞–≤–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä', status: 'online' },
    { id: 2, name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', role: '–ü—Ä–æ—Ä–∞–±', status: 'online' },
    { id: 3, name: '–î–º–∏—Ç—Ä–∏–π –°–∏–¥–æ—Ä–æ–≤', role: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', status: 'away' },
    { id: 4, name: '–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞', role: '–°–º–µ—Ç—á–∏–∫', status: 'offline' },
    { id: 5, name: '–ò–≥–æ—Ä—å –ú–æ—Ä–æ–∑–æ–≤', role: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞–¥–∑–æ—Ä', status: 'online' },
    { id: 6, name: '–ê–Ω–Ω–∞ –í–æ–ª–∫–æ–≤–∞', role: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞', status: 'online' },
    { id: 7, name: '–°–µ—Ä–≥–µ–π –ù–æ–≤–∏–∫–æ–≤', role: '–°–Ω–∞–±–∂–µ–Ω–µ—Ü', status: 'offline' },
    { id: 8, name: '–û–ª—å–≥–∞ –õ–µ–±–µ–¥–µ–≤–∞', role: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', status: 'away' }
  ];

  const recentTasks: ObjectTask[] = [
    { id: 1, title: '–ó–∞–ª–∏–≤–∫–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞', status: 'completed', assignee: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤', dueDate: '2023-08-15' },
    { id: 2, title: '–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –∫–∞—Ä–∫–∞—Å–∞', status: 'in-progress', assignee: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', dueDate: '2024-03-20' },
    { id: 3, title: '–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π', status: 'in-progress', assignee: '–î–º–∏—Ç—Ä–∏–π –°–∏–¥–æ—Ä–æ–≤', dueDate: '2024-04-25' },
    { id: 4, title: '–ú–æ–Ω—Ç–∞–∂ –ª–∏—Ñ—Ç–æ–≤', status: 'pending', assignee: '–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞', dueDate: '2024-06-01' },
    { id: 5, title: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞', status: 'pending', assignee: '–ò–≥–æ—Ä—å –ú–æ—Ä–æ–∑–æ–≤', dueDate: '2024-08-05' }
  ];

  const milestones: ObjectMilestone[] = [
    { date: '2023-06-15', title: '–ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞', status: 'completed', description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏ –Ω–∞—á–∞–ª–æ –∑–µ–º–ª—è–Ω—ã—Ö —Ä–∞–±–æ—Ç' },
    { date: '2023-08-15', title: '–§—É–Ω–¥–∞–º–µ–Ω—Ç –≥–æ—Ç–æ–≤', status: 'completed', description: '–ó–∞–ª–∏–≤–∫–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ –∏ –≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è' },
    { date: '2024-03-20', title: '–ö–∞—Ä–∫–∞—Å –∑–¥–∞–Ω–∏—è', status: 'current', description: '–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ—Å—É—â–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π' },
    { date: '2024-08-15', title: '–ö–æ—Ä–æ–±–∫–∞ –≥–æ—Ç–æ–≤–∞', status: 'upcoming', description: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç' },
    { date: '2024-12-31', title: '–°–¥–∞—á–∞ –æ–±—ä–µ–∫—Ç–∞', status: 'upcoming', description: '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å–¥–∞—á–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é' }
  ];

  // –õ–æ–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å ‚Äî –¥–µ–º–æ)
  const objectLocations = [
    {
      id: 1,
      name: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
      coordinates: [37.6173, 55.7558] as [number, number],
      type: 'site' as const,
      address: object.address // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –∏–∑ –æ–±—ä–µ–∫—Ç–∞
    },
    {
      id: 2,
      name: '–û—Ñ–∏—Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞',
      coordinates: [37.6254, 55.7552] as [number, number],
      type: 'office' as const,
      address: '–ú–æ—Å–∫–≤–∞, –¶–ê–û, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 15'
    },
    {
      id: 3,
      name: '–°–∫–ª–∞–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
      coordinates: [37.6085, 55.7522] as [number, number],
      type: 'site' as const,
      address: '–ú–æ—Å–∫–≤–∞, –°–ê–û, —É–ª. –ê—Ä–±–∞—Ç, 25'
    },
    {
      id: 4,
      name: '–û—Ñ–∏—Å –ø—Ä–æ–¥–∞–∂',
      coordinates: [37.6421, 55.7736] as [number, number],
      type: 'client' as const,
      address: '–ú–æ—Å–∫–≤–∞, –°–ê–û, —É–ª. –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 100'
    }
  ];

  // ‚úÖ –£–¥–∞–ª—è–µ–º getStatusColor ‚Äî –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
  // ‚úÖ –£–¥–∞–ª—è–µ–º getPriorityColor ‚Äî –Ω–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  // ‚úÖ –£–¥–∞–ª—è–µ–º formatPrice ‚Äî –Ω–µ—Ç –±—é–¥–∂–µ—Ç–∞

  const getTaskStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircleOutlined style={{ color: '#52c41a' }} />;
      case 'in-progress':
        return <SyncOutlined spin style={{ color: '#1890ff' }} />;
      case 'pending':
        return <ExclamationCircleOutlined style={{ color: '#faad14' }} />;
      default:
        return null;
    }
  };

  const getMemberStatusBadge = (status: string) => {
    switch (status) {
      case 'online':
        return <Badge status="success" />;
      case 'away':
        return <Badge status="warning" />;
      case 'offline':
        return <Badge status="default" />;
      default:
        return <Badge status="default" />;
    }
  };

  return (
    <div style={{ padding: '24px', background: '#f5f5f5' }}>
      <div style={{ marginBottom: '24px' }}>
        <Button 
          icon={<ArrowLeftOutlined />} 
          onClick={() => navigate('/objects')}
          style={{ marginBottom: '16px' }}
        >
          –ù–∞–∑–∞–¥ –∫ –æ–±—ä–µ–∫—Ç–∞–º
        </Button>
        
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
          <div>
            <Title level={2} style={{ margin: 0 }}>{object.name}</Title>
            {/* ‚úÖ –£–±—Ä–∞–ª–∏ —Ç–µ–≥–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ */}
            {/* ‚úÖ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø, –µ—Å–ª–∏ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è */}
          </div>
          <Space>
            <Button type="primary">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</Button>
            <Button>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</Button>
          </Space>
        </div>
      </div>

      <Row gutter={[16, 16]}>
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Col xs={24} lg={16}>
          <Card title="–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞" style={{ marginBottom: '16px' }}>
            <Paragraph>{object.description}</Paragraph>
          </Card>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π */}
          <Card title="–ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞" style={{ marginBottom: '16px' }}>
            <Progress 
              percent={progress} 
              status={progress === 100 ? 'success' : 'active'}
              strokeColor={{
                '0%': '#108ee9',
                '100%': '#87d068',
              }}
            />
            <Text type="secondary" style={{ marginTop: '8px', display: 'block' }}>
              {progress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            </Text>
          </Card>

          {/* –ó–∞–¥–∞—á–∏ */}
          <Card title="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏" style={{ marginBottom: '16px' }}>
            <List
              dataSource={recentTasks}
              renderItem={(task) => (
                <List.Item>
                  <List.Item.Meta
                    avatar={getTaskStatusIcon(task.status)}
                    title={task.title}
                    description={
                      <Space>
                        <Text type="secondary">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.assignee}</Text>
                        <Text type="secondary">‚Ä¢</Text>
                        <Text type="secondary">–°—Ä–æ–∫: {new Date(task.dueDate).toLocaleDateString('ru-RU')}</Text>
                      </Space>
                    }
                  />
                </List.Item>
              )}
            />
          </Card>

          {/* –ö–∞—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ */}
          <ObjectMap 
            geometry={object.coords}
            zoom={12}
          />
        </Col>

        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
        <Col xs={24} lg={8}>
          {/* ‚úÖ –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–∫—Ç–∞" ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö */}
          {/* –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å */}
          <Card title="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" style={{ marginBottom: '16px' }}>
            <Space direction="vertical" style={{ width: '100%' }}>
              <div>
                <Text type="secondary">
                  <EnvironmentOutlined /> {object.address}
                </Text>
              </div>
            </Space>
          </Card>

          {/* –ö–æ–º–∞–Ω–¥–∞ */}
          <Card title="–ö–æ–º–∞–Ω–¥–∞ –æ–±—ä–µ–∫—Ç–∞">
            <List
              size="small"
              dataSource={workers}
              renderItem={(worker) => (
                <List.Item>
                  <List.Item.Meta
                    avatar={
                      <Tooltip title={worker.status}>
                        {getMemberStatusBadge(worker.status)}
                        <Avatar size="small" icon={<UserOutlined />} style={{ marginLeft: '8px' }} />
                      </Tooltip>
                    }
                    title={worker.name}
                    description={worker.role}
                  />
                </List.Item>
              )}
            />
          </Card>
        </Col>
      </Row>

      {/* –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ */}
      <Card title="–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞" style={{ marginTop: '16px' }}>
        <Timeline>
          {milestones.map((milestone, index) => (
            <Timeline.Item
              key={index}
              color={
                milestone.status === 'completed' ? 'green' :
                milestone.status === 'current' ? 'blue' : 'gray'
              }
              dot={
                milestone.status === 'completed' ? <CheckCircleOutlined /> :
                milestone.status === 'current' ? <SyncOutlined spin /> : null
              }
            >
              <div>
                <Text strong>{milestone.title}</Text>
                <br />
                <Text type="secondary">{milestone.description}</Text>
                <br />
                <Text type="secondary" style={{ fontSize: '12px' }}>
                  <CalendarOutlined /> {new Date(milestone.date).toLocaleDateString('ru-RU')}
                </Text>
              </div>
            </Timeline.Item>
          ))}
        </Timeline>
      </Card>
    </div>
  );
};

export default ObjectDetail;